plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'maven-publish'
}


group = 'com.datdeveloper'
version = "${minecraftVersion}-1.1.0"

java {
    archivesBaseName = 'datfactions'
    toolchain.languageVersion = JavaLanguageVersion.of(17)

    withJavadocJar()
    withSourcesJar()
}

minecraft {
    mappings channel: 'parchment', version: "${parchmentVersion}-${minecraftVersion}"

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'datfactions'

            mods {
                factions2 {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'datfactions'

            mods {
                factions2 {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'datfactions'

            mods {
                factions2 {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'factions2', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                factions2 {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url "https://libraries.minecraft.net" }
    maven { url "https://maven.datdeveloper.com/releases" }
    maven { url "https://cubicinterpolation.net/maven/" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraftVersion}-${forgeVersion}"

    implementation 'com.mojang:brigadier:1.0.18'
    implementation 'com.google.code.gson:gson:2.10'

    implementation "com.datdeveloper:datmoddingapi:${datModdingAPIVersion}"

    implementation fg.deobf("commoble.infiniverse:infiniverse-1.19:${infiniverseVersion}")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "factions2",
                "Specification-Vendor"    : "jtljac",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "jtljac",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java

            pom {
                name = project.name
                description = 'A mod to add player run factions into the game'
                url = 'https://datdeveloper.com/factions-2'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/jtljac/factions-2/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'jtljac'
                        name = 'Jacob Lucas'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com.com/jtljac/factions-2.git'
                    developerConnection = 'scm:git:ssh://github.com/jtljac/factions-2.git'
                    url = 'https://datdeveloper.com/factions-2/'
                }
            }
        }
    }

    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            name = "Dat-Maven-Repo"
            url = "https://maven.datdeveloper.com/releases"
            credentials {
                username = System.env.MAVENREPOUSER
                password = System.env.MAVENREPOPASS
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
