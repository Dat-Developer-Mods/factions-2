import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'net.neoforged.moddev' version '2.0.61-beta'
    id 'java-library'

    id 'idea'

    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.1.16'

    id 'checkstyle'
}

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)

    withJavadocJar()
    withSourcesJar()
}

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_version
        minecraftVersion = project.minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers.add('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            clientData()

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            // Recommended logging data for a userdev environment
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

/* -------------------------------------------- */
/*  Dependencies                                */
/* -------------------------------------------- */

repositories {
    mavenLocal()
    maven { url "https://libraries.minecraft.net" }
    maven { url "https://maven.datdeveloper.com/releases" }
    maven { url "https://cubicinterpolation.net/maven/" }
}

dependencies {
    implementation "com.mojang:brigadier:${brigadier_version}"
    implementation "com.google.code.gson:gson:${gson_version}"

    implementation "com.datdeveloper:datmoddingapi:${datmoddingapi_version}"

    // Testing
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
    testImplementation "net.neoforged:testframework:${neo_version}"
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

/* -------------------------------------------- */
/*  Tasks                                       */
/* -------------------------------------------- */

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [minecraft_version      : minecraft_version,
                             minecraft_version_range: minecraft_version_range,
                             neo_version            : neo_version,
                             neo_version_range      : neo_version_range,
                             loader_version_range   : loader_version_range,
                             mod_id                 : mod_id,
                             mod_name               : mod_name,
                             mod_license            : mod_license,
                             mod_version            : mod_version,
                             mod_authors            : mod_authors,
                             mod_description        : mod_description]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

// Include the output of "generateModMetadata" as an input directory for the build
sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

tasks.register('printVersion') {
    doLast {
        println version
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

/* -------------------------------------------- */
/*  Publishing                                  */
/* -------------------------------------------- */

// Maven Publishing
publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java

            pom {
                name = project.name
                description = 'A modding library for DatDeveloper'
                url = 'https://datdeveloper.com/datmoddingapi'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/jtljac/DatModdingAPI/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'jtljac'
                        name = 'Jacob Lucas'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com.com/dat-developer-mods/datmoddingapi.git'
                    developerConnection = 'scm:git:ssh://github.com/dat-developer-mods/datmoddingapi.git'
                    url = 'https://api.datdeveloper.com/'
                }

                withXml {
                    asNode().dependencies.dependency.each { dep ->
                        if(dep.artifactId.last().value().last() == "forge") {
                            assert dep.parent().remove(dep)
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "Dat-Maven-Repo"

            if (project.version.endsWith('-SNAPSHOT')) {
                url = "https://maven.datdeveloper.com/snapshots"
            } else {
                url = "https://maven.datdeveloper.com/releases"
            }


            credentials {
                username = System.getenv("MAVENREPOUSER")
                password = System.getenv("MAVENREPOPASS")
            }
        }
    }
}

// Curse Publishing
tasks.register('publishCurseForge', TaskPublishCurseForge) {
    dependsOn(tasks.jar)
    group = "publishing"

    apiToken=System.getenv("CURSEFORGE_TOKEN")
    def mainFile=upload(curse_id, jar)

    if (project.version.endsWith('-SNAPSHOT')) {
        mainFile.releaseType='beta'
    } else {
        mainFile.releaseType='release'
    }

    mainFile.changelog=System.getenv("CHANGELOG")
    mainFile.changelogType='markdown'
    mainFile.displayName="${mod_name} - ${version}"
    mainFile.addModLoader("NeoForge")
    mainFile.addGameVersion(minecraft_version)
    mainFile.addJavaVersion("Java 21")
}

// Modrinth Publishing
modrinth {
    token=System.getenv("MODRINTH_TOKEN")
    projectId=modrinth_id
    versionName="${mod_name} - ${version}"
    versionType="release"
    uploadFile=jar
    gameVersions=[minecraft_version]
    loaders=["neoforge"]
    changelog=System.getenv("CHANGELOG")
}

// Dependencies
tasks.modrinth.configure {
    dependsOn(tasks.jar)
}

publish.configure {
    dependsOn(tasks.modrinth, tasks.publishCurseForge)
}

tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

/* -------------------------------------------- */
/*  Testing                                     */
/* -------------------------------------------- */

test {
    useJUnitPlatform()
}

checkstyle {
    configFile = 'checkstyle.xml' as File
}

checkstyleTest {
    enabled = false
}